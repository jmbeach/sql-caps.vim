import vim, string, re
sqlWords = [
	"ADD",
	"ALL",
	"ALTER",
	"AND",
	"ANY",
	"AS",
	"ASC",
	"AUTHORIZATION",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BREAK",
	"BROWSE",
	"BULK",
	"BY",
	"CASCADE",
	"CASE",
	"CHECK",
	"CHECKPOINT",
	"CLOSE",
	"CLUSTERED",
	"COALESCE",
	"COLLATE",
	"COLUMN",
	"COMMIT",
	"COMPUTE",
	"CONSTRAINT",
	"CONTAINS",
	"CONTAINSTABLE",
	"CONTINUE",
	"CONVERT",
	"CREATE",
	"CROSS",
	"CURRENT",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"DATABASE",
	"DBCC",
	"DEALLOCATE",
	"DECLARE",
	"DEFAULT",
	"DELETE",
	"DENY",
	"DESC",
	"DISK",
	"DISTINCT",
	"DISTRIBUTED",
	"DOUBLE",
	"DROP",
	"DUMP",
	"ELSE",
	"END",
	"ERRLVL",
	"ESCAPE",
	"EXCEPT",
	"EXEC",
	"EXECUTE",
	"EXISTS",
	"EXIT",
	"EXTERNAL",
	"FETCH",
	"FILE",
	"FILLFACTOR",
	"FOR",
	"FOREIGN",
	"FREETEXT",
	"FREETEXTTABLE",
	"FROM",
	"FULL",
	"FUNCTION",
	"GOTO",
	"GRANT",
	"GROUP",
	"HAVING",
	"HOLDLOCK",
	"IDENTITY",
	"IDENTITYCOL",
	"IDENTITY_INSERT",
	"IF",
	"IN",
	"INDEX",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KILL",
	"LEFT",
	"LIKE",
	"LINENO",
	"LOAD",
	"MERGE",
	"NATIONAL",
	"NOCHECK",
	"NONCLUSTERED",
	"NOT",
	"NULL",
	"NULLIF",
	"OF",
	"OFF",
	"OFFSETS",
	"ON",
	"OPEN",
	"OPENDATASOURCE",
	"OPENQUERY",
	"OPENROWSET",
	"OPENXML",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PERCENT",
	"PIVOT",
	"PLAN",
	"PRECISION",
	"PRIMARY",
	"PRINT",
	"PROC",
	"PROCEDURE",
	"PUBLIC",
	"RAISERROR",
	"READ",
	"READTEXT",
	"RECONFIGURE",
	"REFERENCES",
	"REPLICATION",
	"RESTORE",
	"RESTRICT",
	"RETURN",
	"REVERT",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROWCOUNT",
	"ROWGUIDCOL",
	"RULE",
	"SAVE",
	"SCHEMA",
	"SECURITYAUDIT",
	"SELECT",
	"SEMANTICKEYPHRASETABLE",
	"SEMANTICSIMILARITYDETAILSTABLE",
	"SEMANTICSIMILARITYTABLE",
	"SESSION_USER",
	"SET",
	"SETUSER",
	"SHUTDOWN",
	"SOME",
	"STATISTICS",
	"SYSTEM_USER",
	"TABLE",
	"TABLESAMPLE",
	"TEXTSIZE",
	"THEN",
	"TO",
	"TOP",
	"TRAN",
	"TRANSACTION",
	"TRIGGER",
	"TRUNCATE",
	"TRY_CONVERT",
	"TSEQUAL",
	"UNION",
	"UNIQUE",
	"UNPIVOT",
	"UPDATE",
	"UPDATETEXT",
	"USE",
	"USER",
	"VALUES",
	"VARCHAR",
	"VARYING",
	"VIEW",
	"WAITFOR",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN GROUP",
	"WRITETEXT"
]

for i in range(0, len(vim.current.buffer)):
	line = vim.current.buffer[i]
	words = line.split()
	for word in words:
		if word.isupper():
			continue
		for sqlWord in sqlWords:
			if sqlWord in word.upper():
				line = re.sub(r"\b"+word+r"\b", sqlWord, line)
	vim.current.buffer[i] = line

